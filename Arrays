/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package arrays;

import java.util.Random;
import java.util.Stack;

/**
 *
 * @author Ricardo KAKA
 */
public class Arrays {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        Arrays a = new Arrays();
        a.startApplication(); 
    }
    
    public void startApplication(){
        Stack s = new Stack();
        int a[] = new int[]{1,2,3,4,5,6,7};
        System.out.println(binarySearch(new int[]{1,2,3,4},4,0,3));
    }
    
    public void matrixTricks(int a[][],int k){
        for(int i = 0 ; i < a.length - k ; i++){
            for(int j = 0 ; j < a[0].length - k ; j++){
               // Two more times 
                
                
                
                
            }
        }
    }
    
    
    
    public void Matrix(int a[][]){
            for(int i = 0; i < a.length ; i++){
                for(int j = 0; j < a.length; j++){
                    if(a[i][j] == 1){
                        a[i][0] = 1;
                        a[0][j] = 1 ;
                    }
                }
            }
            
            for(int i = 0; i < a.length ; i++){
                if(a[i][0] == 1){
                    for(int j = 0 ; j <a.length ; j++){
                        a[i][j]=1;
                    }
                }
            }
            
            for(int j = 0; j < a.length ; j++){
                if(a[0][j] == 1){
                    for(int i = 0; i < a.length ; i++){
                        a[i][j] = 1 ;
                    }
                }
                
                
            }
            
            
            
    }
    
    public void printSpiral(int a[][]){
        for(int i = 0; i < a.length ; i++){
           System.out.println(a[i]);
        }
        
    }
    
    public boolean binarySearch(int a[], int found, int low, int high){
           int mid =  (low + high)/2 ;
         
           if(a[mid] == found){
               return true ;
           }else if(low>high ){
               return false ;
           }else{
               if(found < a[mid]){
                  return  binarySearch(a,found,low,mid-1);
               }else if(found > a[mid]){
                  return  binarySearch(a,found,mid+1,high);
               }
           }
           
           return false ;
    }
    
    public void printDuplicate(int a[]){
        
        
        
        for(int i = 0; i < a.length ; i++){
            if (a[Math.abs(a[i])] >= 0){
                        a[Math.abs(a[i])] = -a[Math.abs(a[i])];
                        System.out.println(a[Math.abs(a[i])]);
            }
            else{}
             //System.out.println( Math.abs(a[i]));
        }
    
    }
    
    
    public void seg1ando(int a[]){
        int left = 0;
        int right = a.length -1 ;
        while(true){
            while(a[right] !=0){
                right -- ;
            }
            while(a[left] != 1){
                left++;
            }
            if(left > right){
                break ;
            }else{
                int temp = a[left] ;
                a[left] = a[right];
                a[right] = temp ;
            
            }
            
        }
            
            for(int i = 0; i < a.length ; i++){
                System.out.println(a[i]);
            }
        
        
        
        
    }
    
    
    public void partition(int a[]){
        Random r = new Random();
        int pivot = r.nextInt(a.length);
        int temp = a[pivot];
        System.arraycopy(a,pivot+1,a,pivot,a.length-pivot-1);
        a[a.length-1] = temp ;
        int left = 0 ;
        int right = a.length- 2 ;
        
        while(left != right){
            if(a[left] > a[pivot]){
                // swap
                int temp1 = a[left];
                a[left] = a[right];
                a[right] = temp1 ;
                
                right-- ;
                
            }else{
                left++;
            }
        }
        
        
        
        
        
        
        
    }
    
    
    public void findMatrixWith1(int a[][]){
    
    }    
    public void recursion(int a[], int d, int index,Stack s){
        if(d == 0){
            for(int i = a.length-1 ; i >= a.length-index ; i --){
              //  System.out.println(a[i]);
                s.add(a[i]);
            }
        }else{
            recursion(a,d-1,index+1,s);
            s.add(a[index]);
            //System.out.println(a[index]);
        }
    }
    
    public void mergeArr(int a[],int b[]){
        int pointer1 = 0;
        int pointer2 = 0 ;
        int c[] = new int[a.length + b.length];
        int counter = 0;
        
        while(pointer1 >= a.length || pointer2 >=b.length){
           
            if(a[pointer1] > b[pointer2]){
                c[counter] = b[pointer2];
                pointer2++;
                counter++;
            }else{
                c[counter] = a[pointer1];
                pointer1++;
                counter++;
            }
            
        }
        
        if(pointer1 != a.length){
            System.out.println("first space");
        }else if(pointer2 != b.length){
            System.out.println("Second space");
        }else{
            
        }
        
        
        
    }
    
    public void find(int a[]){
        int res = a[0];
        for(int i = 1 ; i <a.length ; i++){
            res = res ^ a[i];
        }
        
        System.out.println(res);
    }
    
    public void sum(int a[], int sum){
        
        int start = 0;
        int end = a.length -1 ;
        while(start < end){
            int diff = a[start] - a[end];
            if(diff < 0)
            start++;
            else if(diff > 0)
                end++;
            else if(diff == 0)
                break ;
        }
    
    }
    
    public void reverseRecursion(int a[], int i){
            if(i == a.length  ){
                return ;
            }
            reverseRecursion(a,i+1);
            if(i> a.length/2){
                int temp = a[a.length - i -1];
                a[a.length-i-1] =a[i];
                a[i]= temp ;
            }
            
    }
    
    public void reverseArray(int a[]){
        for(int i = 0; i < a.length /2 ; i++){
            int temp = a[i];
            a[i] = a[a.length- i - 1];
            a[a.length- i - 1] = temp ;
        }
        
        for(int i = 0; i < a.length ; i++){
            System.out.println(a[i]);
        }
        
    }
    
    public void arrayRotate(int a[], int d){
       // int temp[] = new int[d];
        
        for(int i = 0 ; i < d ; i++){
            int temp = a[0];
            System.arraycopy(a, 1, a, 0, a.length -1 );
            a[a.length -1 ] = temp;
        // System.arraycopy(a, d-1,a, 0, a.length - d);
        }
        for(int i = 0 ; i < a.length ; i++){
            System.out.println(a[i]);
        }
        
    }
    
}

